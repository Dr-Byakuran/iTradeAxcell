@using iTrade.CustomHtmlHelper;
@model iTrade.Models.Staff

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutMain.cshtml";
}

<!-- ================== BEGIN PAGE LEVEL STYLE ================== -->
<link href="@Url.Content("~/assets/plugins/DataTables/css/data-table.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/gritter/css/jquery.gritter.css")" rel="stylesheet" type="text/css" />
<!-- ================== END PAGE LEVEL STYLE ================== -->
<!-- begin page-header -->
<h1 class="page-header lead">Staffs </h1>
<!-- end page-header -->
<div class="email-btn-row hidden-xs">
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })

</div>

<!-- begin panel -->
<div class="panel panel-inverse">
    <div class="panel-heading">
        Staff info
    </div>

    <div class="panel-body">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.StaffID)
            @Html.HiddenFor(model => model.BranchName, new { id = "branchName" })
            @Html.HiddenFor(model => model.CreatedBy)
            @Html.HiddenFor(model => model.CreatedOn)


            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.StaffID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.StaffID, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.StaffID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DepartmentName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.DepartmentName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DepartmentName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label">
                        Assign Outlet
                    </label>
                    <div class="col-md-6">
                        @foreach (var item in (SelectList)ViewBag.BranchId)
                        {
                            <input type="checkbox" name="BranchID" value="@item.Value"
                                   @if (!string.IsNullOrEmpty(Model.BranchID) && Model.BranchID.Contains(item.Value)) { <text> checked="checked" </text>  }
                                   class="checkbox-inline" />
                                    @Html.Label(item.Text, new { @class = "control-label" })
                                    <br />
                        }
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.IsActive, Html.OptionsForBoolean(model => model.IsActive), htmlAttributes: new { @class = "form-control" })

                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-md-2">
                        User
                    </div>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.UserID, new SelectList(ViewData["seStaffUserList"] as IEnumerable<iTrade.Models.ApplicationUser>, "Id", "DisplayName"), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-6 pull-right">
                        <input type="submit" value="Save" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        }

    </div>
</div>
<!-- end panel -->

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts{
    <script src="@Url.Content("~/assets/plugins/DataTables/js/jquery.dataTables.js")"></script>
    <script src="@Url.Content("~/assets/js/table-manage-default.demo.min.js")"></script>
    <script src="@Url.Content("~/assets/plugins/gritter/js/jquery.gritter.js")"></script>
    <script src="@Url.Content("~/assets/js/ui-modal-notification.demo.min.js")"></script>
    <script src="@Url.Content("~/assets/js/apps.min.js")"></script>

    <script src="@Url.Content("~/Scripts/modal-client.js")"></script>


}


<script>
    $(document).ready(function () {
        // App.init();
        TableManageDefault.init();
        // Notification.init();
    });
</script>

<script>
    $(function () {
        $("input:checkbox").on('click', function () {
            // in the handler, 'this' refers to the box clicked on
            var $box = $(this);
            if ($box.is(":checked")) {
                // the name of the box is retrieved using the .attr() method
                // as it is assumed and expected to be immutable
                var group = "input:checkbox[name='" + $box.attr("name") + "']";
                // the checked state of the group/box on the other hand will change
                // and the current value is retrieved using .prop() method
                $(group).prop("checked", false);
                $box.prop("checked", true);

                var val = $box.val();
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("AutoBranch")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        search: val
                    },
                    success: function (data) {
                        $('#branchName').val(data.result.BranchName);
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }

                });
            } else {
                $box.prop("checked", false);
            }
        });
    });
</script>