@model iTrade.Models.TutorRate

@using (Html.BeginForm("AddItem", "TutorRate", FormMethod.Post, new { id = "addItemFrom" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.TutorID, new { id = "itemTutorID" })
    @Html.HiddenFor(model => model.TutorCode, new { id = "itemTutorCode" })
    @Html.HiddenFor(model => model.TutorName, new { id = "itemTutorName" })
    @Html.HiddenFor(model => model.TutorType, new { id = "itemTutorType" })

    <div class="row">
        <div class="col-md-7">
            <div class="form-horizontal">               
                <div class="form-group">
                    @Html.LabelFor(model => model.ClassType, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        <select id="ClassType" name="ClassType" class="form-control">
                            <option value="Group">Group</option>
                            <option value="Private">Private</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CourseName, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        <select id="itemCourseCode" name="CourseCode" class="form-control selectpicker" data-size="10" data-live-search="true" data-style="btn-white">
                            <option value="0" selected>Select Course</option>
                            @foreach (var item in ViewData["CourseAll"] as IEnumerable<iTrade.Models.Course>)
                            {
                                <option value="@item.CourseCode">@item.CourseName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CourseLevel, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.CourseLevel, new { htmlAttributes = new { id = "itemCourseLevel", @class = "form-control" , @readonly=true } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.MinAttend, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.MinAttend, new { htmlAttributes = new { id = "itemMinAttend", @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.MaxAttend, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.MaxAttend, new { htmlAttributes = new { id = "itemMaxAttend", @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { id = "itemRate", @class = "form-control" } })
                    </div>
                </div>              
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        $('#itemCourseCode').on("change", function () {
            var val = $('#itemCourseCode').val();

            if (val != 0) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("AutoCourseLevel")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        search: val
                    },
                    success: function (data) {
                        $('#itemCourseLevel').val(data.result.CourseLevel);
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }

                });
            }
        });       
    })
</script>

