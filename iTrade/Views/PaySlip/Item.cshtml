@model iTrade.Models.PaySlipDetail

@using (Html.BeginForm("AddItem", "PaySlip", FormMethod.Post, new { id = "addPaySlipItemFrom" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.PaySlipDetailID, new { id = "itemPaySlipDetailID" })
    @Html.HiddenFor(model => model.TutorCode, new { id = "itemTutorCode" })
    @Html.HiddenFor(model => model.PaySlipID, new { id = "itemPaySlipID" })

    <div class="row">
        <div class="col-md-7">
            <div class="form-horizontal">                              
                <div class="form-group">
                    @Html.Label("Class Name", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        <select id="itemPriceID" name="PriceID" class="form-control selectpicker" data-size="10" data-live-search="true" data-style="btn-white">
                            <option value="0" selected>Select ClassName</option>
                            @foreach (var item in ViewData["PriceBookAll"] as IEnumerable<iTrade.Models.Pricebook>)
                            {
                                <option value="@item.PriceID">@item.CourseName - @item.CourseLevel - @item.CourseDuration - @item.TeacherLevel - @item.CourseType</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Date, new { htmlAttributes = new { id = "itemDate", @class = "form-control" } })
                    </div>
                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { id = "itemQuantity", @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-4">
                        <div class="input-group bootstrap-timepicker">
                            @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { id = "itemstartTime", @class = "timepicker form-control" } })
                            <span class="input-group-addon"><i class="fa fa-clock-o"></i></span>
                            @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-4">
                        <div class="input-group bootstrap-timepicker">
                            @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { id = "itemendTime", @class = "timepicker form-control" } })
                            <span class="input-group-addon"><i class="fa fa-clock-o"></i></span>
                            @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.StudyHour, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.StudyHour, new { htmlAttributes = new { id = "itemHour", @class = "form-control", @readonly = true } })
                    </div>
                    @Html.LabelFor(model => model.ClassType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.ClassType, new { htmlAttributes = new { id = "itemClassType", @class = "form-control" , @readonly =true} })
                    </div>
                </div>                 
                <div class="form-group">
                    @Html.LabelFor(model => model.HourlyRate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.HourlyRate, new { htmlAttributes = new { id = "itemHourlyRate", @class = "form-control" , @readonly=true } })
                    </div>              
                    @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { id = "itemAmount", @class = "form-control", @readonly=true } })
                    </div>
                </div>              
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        $('#itemDate').datepicker({
            format: 'dd/mm/yyyy',
            setDate: new Date(),
            todayHighlight: true,
            autoclose: true
        });
        $('#itemDate').datepicker('setDate', new Date());

        $('.timepicker').timepicker();
    })
</script>

<script>
    $(document).ready(function () {
        $('#itemHour').on("change", function () {
            // alert('Changed!');
            reCalculateAmount();
        });

        $('#itemHourlyRate').on("change", function () {
            // alert('Changed!');
            reCalculateAmount();
        });

        function reCalculateAmount() {
            var hour = $('#itemHour').val();
            var rate = $('#itemHourlyRate').val();

            var amount = hour * rate;
            $('#itemAmount').val(amount);

        }
    })
</script>

<script>
    $(document).ready(function () {
        $('#itemPriceID').on("change", function () {
            var val1 = $('#itemPriceID').val();
            var val2 = $('#itemQuantity').val();

            if (val1 != 0) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("AutoSelect")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        priceID: val1,
                        quantity: val2
                    },
                    success: function (data) {
                        $('#itemHourlyRate').val(data.result.Rate);
                        $('#itemClassType').val(data.result.ClassType);

                        var hour = $('#itemHour').val();
                        var rate = $('#itemHourlyRate').val();

                        var amount = hour * rate;
                        $('#itemAmount').val(amount);
                    },
                    error: function (xhr, status, error) {
                        alert("Tutor don't have this rate,Please set again ");
                    }

            });
            } else {              
                $('#itemClassType').val(null);
                $('#itemHourlyRate').val("0");
                $('#itemAmount').val("0");
            }
        });

        $('#itemQuantity').on("change", function () {
            var val3 = $('#itemPriceID').val();
            var val4 = $('#itemQuantity').val();

            if (val3 != 0 && val4 > 0) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("AutoSelect")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        priceID: val3,
                        quantity: val4
                    },
                    success: function (data) {
                        $('#itemHourlyRate').val(data.result.Rate);

                        var hour = $('#itemHour').val();
                        var rate = $('#itemHourlyRate').val();

                        var amount = hour * rate;
                        $('#itemAmount').val(amount);
                    },
                    error: function (xhr, status, error) {
                        alert("Tutor don't have this rate,Please set again ");
                    }

                });
            } else {
                $('#itemHourlyRate').val("0");
                $('#itemAmount').val("0");
            }
    });
    })
</script>

<script>
    $('#itemHour').mouseover(function () {
        var starttime = $('#itemstartTime').val();
        var endtime = $('#itemendTime').val();

        $.ajax({
            type: 'GET',
            url: '@Url.Action("AutoHour")',
            dataType: "json",
            contentType: 'application/json, charset=utf-8',
            data: {
                starttime: starttime,
                endtime: endtime
            },
            success: function (data) {
                $('#itemHour').val(data.result);
                var rate = $('#itemHourlyRate').val();

                var amount = data.result * rate;
                $('#itemAmount').val(amount);
            },
            error: function (xhr, status, error) {
                alert(error);
            }

        });
    });
</script>