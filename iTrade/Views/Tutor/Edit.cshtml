@using iTrade.CustomHtmlHelper;
@model iTrade.Models.Tutor
@*@model IEnumerable<iTrade.Models.Staff>*@

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutMain.cshtml";
}

<!-- ================== BEGIN PAGE LEVEL STYLE ================== -->
<!-- ================== BEGIN PAGE LEVEL STYLE ================== -->
<link href="@Url.Content("~/assets/plugins/DataTables/css/data-table.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/gritter/css/jquery.gritter.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/bootstrap-datepicker/css/datepicker.css")" rel="stylesheet" type="text/css" />

<link href="@Url.Content("~/assets/plugins/bootstrap-select/bootstrap-select.min.css")" rel="stylesheet" type="text/css" />
<link href="~/assets/plugins/jquery-file-upload/css/jquery.fileupload.css" rel="stylesheet" />
<!-- ================== END PAGE LEVEL STYLE ================== -->
@using (Html.BeginForm())
{
    <!-- begin page-header -->
    <div class="page-header lead">
        Tutor Registration / New
        <span class="email-btn-row pull-right">
            @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })
            <button type="button" id="btnSaveAndAdd" class="btn btn-default">Save & Add Another</button>
            <button type="submit" id="btnSaveChanges" class="btn btn-primary">Save Changes</button>
        </span>
    </div>
    <!-- end page-header -->


    var MTuSelect = "";
    var ATuSelect = "";
    //JobType,SJobSelect,FJobSelect,PJobSelect

    var FJobSelect = "";
    var PJobSelect = "";


    if (Model.TutorType == "Music")
    {
        MTuSelect = "selected";
    }
    else if (Model.TutorType == "Academy")
    {
        ATuSelect = "selected";
    }

    if (Model.JobType == "FullTime")
    {
        FJobSelect = "selected";
    }
    else if (Model.JobType == "PartTime")
    {
        PJobSelect = "selected";
    }

   
    var MGSelect = "";
    var FGSelect = "";
    if (Model.Gender == "Male")
    {
        MGSelect = "selected";
    }
    else if (Model.Gender == "Female")
    {
        FGSelect = "selected";
    }


    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @*@Html.HiddenFor(model => model.Student.SalesPersonID, new { id = "personID" })
        @Html.HiddenFor(model => model.Student.SalesPersonName, new { id = "personName" })*@
    @Html.HiddenFor(model => model.TutorID)
    @Html.HiddenFor(model => model.CreatedBy)
    @Html.HiddenFor(model => model.CreatedOn)


    <div class="">
        <ul class="nav nav-tabs">
            <li class="active"><a href="#default-tab-1" data-toggle="tab"><h5 class="media-heading">General Info</h5> </a></li>
            <li class=""><a href="#default-tab-2" data-toggle="tab"><h5 class="media-heading">Attachment</h5> </a></li>
            @*<li class=""><a href="#default-tab-2" data-toggle="tab"><h5 class="media-heading">Parents / Guardian</h5> </a></li>
                <li class=""><a href="#default-tab-3" data-toggle="tab"><h5 class="media-heading">More Details</h5> </a></li>*@
        </ul>

    </div>
    <div class="tab-content">
        <div class="tab-pane fade active in" id="default-tab-1">
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.TutorName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.TutorName, new { htmlAttributes = new { @class = "form-control", placeholder = "Name" } })
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>
                   @Html.LabelFor(model => model.JobType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <select id="JobType" name="JobType" class="form-control">
                        <option value="0">Select JobType</option>
                        <option value="FullTime" @FJobSelect>FullTime</option>
                        <option value="PartTime" @PJobSelect>PartTime</option>
                    </select>
                </div>
                    

                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.TutorCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.TutorCode, new { htmlAttributes = new { @class = "form-control", placeholder = "Tutor Code" } })
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>
                    @Html.LabelFor(model => model.TutorType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        <select id="TutorType" name="TutorType" class="form-control">
                            <option value="0">Select TutorType</option>
                            <option value="Music" @MTuSelect>Music</option>
                            <option value="Academy" @ATuSelect>Academy</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.NRIC, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.NRIC, new { htmlAttributes = new { @class = "form-control", placeholder = "NRIC" } })
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>
                    
                </div>
                <div class="form-group">
                    
                    @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { id = "birthDate", @class = "form-control", placeholder = "Date Of Birth" } })
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        <select id="Gender" name="Gender" class="form-control">
                            <option value="0">Select Gender</option>
                            <option value="Male" @MGSelect>Male</option>
                            <option value="Female" @FGSelect>Female</option>
                        </select>

                    </div>

                </div>
                <div class="form-group">
                   
                    @Html.LabelFor(model => model.Qualification, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Qualification, new { htmlAttributes = new { @class = "form-control", placeholder = "Qualification" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Addr1, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Addr1, new { htmlAttributes = new { @class = "form-control", placeholder = "Address" } })
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Phone (Main)" } })
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>
                    @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Mobile" } })
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PrimaryEmail, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.PrimaryEmail, new { htmlAttributes = new { @class = "form-control", placeholder = "Primary Email" } })
                    </div>
                    
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.JoinedDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.JoinedDate, new { htmlAttributes = new { id = "JoinedDate", @class = "form-control", placeholder = "Joined On" } })
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ResignedDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.ResignedDate, new { htmlAttributes = new { id = "ResignedDate", @class = "form-control", placeholder = "ResignedDate" } })
                    </div>
                    @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.DropDownListFor(model => model.IsActive, Html.OptionsForBoolean(model => model.IsActive), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Subjects, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        <select id="CourseSubjects" name="CourseSubjects" class="selectpicker show-tick form-control" multiple data-live-search="false">
                            @foreach (var item in ViewData["CourseAll"] as IEnumerable<iTrade.Models.Course>)
                            {
                                <option value="@item.CourseID">@item.CourseName</option>
                            }
                        </select>
                        @*@Html.EditorFor(model => model.Subjects, new { htmlAttributes = new { id = "ResignedDate", @class = "form-control", placeholder = "Subjects" } })*@
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>

                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Experience, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Experience, new { htmlAttributes = new { id = "ResignedDate", @class = "form-control", placeholder = "Experience" } })
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>

                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { id = "ResignedDate", @class = "form-control", placeholder = "Remark" } })
                        @*@Html.ValidationMessageFor(model => model.Course.CourseCode, "Can't be empty", new { @class = "text-danger" })*@
                    </div>

                </div>
                <br />
            </div>

            <br />
        </div>
        @*<div class="tab-pane fade" id="default-tab-2">
            </div>
            <div class="tab-pane fade" id="default-tab-3">
            </div>*@

        <div class="tab-pane fade" id="default-tab-2">
            <div class="form-horizontal">
                <div id="divTutorDetail">

                </div>
                @*<div class="form-group">
                    @Html.Label(" ", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        <span class="btn btn-success fileinput-button">
                            <i class="glyphicon glyphicon-plus"></i>
                            <span>Select files...</span>
                            <input id="fileupload" type="file" name="files[]" multiple>
                        </span>
                    </div>
                </div>*@
                @*<div class="col-md-8 col-md-offset-2">
                    <div class="row">
                        <div class="col-sm-3">
                            Attachment:
                        </div>
                        <div class="col-sm-9">
                            <div class="row">
                                <div class="col-sm-12">
                                    <span class="btn btn-success fileinput-button">
                                        <i class="glyphicon glyphicon-plus"></i>
                                        <span>Select files...</span>
                                        <input id="fileupload" type="file" name="files[]" multiple>
                                    </span>
                                    <br>
                                    <br>

                                    <br>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>*@
                @*<div id="divOrderDetail">

                </div>
                @Html.Action("UploadAttachment", new { id = ViewBag.No })*@
            </div>

        </div>
        <input type="hidden" id="AttachmenNo" name="AttachmenNo" />
        <input type="hidden" id="SubjectsName" name="SubjectsName" />
    </div>


}



@section Scripts{
    <script src="@Url.Content("~/assets/plugins/DataTables/js/jquery.dataTables.js")"></script>
<script src="@Url.Content("~/assets/js/table-manage-default.demo.min.js")"></script>
<script src="@Url.Content("~/assets/plugins/gritter/js/jquery.gritter.js")"></script>
<script src="@Url.Content("~/assets/js/ui-modal-notification.demo.min.js")"></script>
<script src="@Url.Content("~/assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.js")"></script>
<script src="@Url.Content("~/assets/js/apps.min.js")"></script>

<script src="@Url.Content("~/Scripts/modal-client.js")"></script>

<script src="@Url.Content("~/assets/plugins/bootstrap-select/bootstrap-select.min.js")"></script>
<script src="@Url.Content("~/assets/plugins/jquery-file-upload/js/jquery.fileupload.js")"></script>
}

<script type="text/javascript">
    function isDecimal(evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode == 8 || charCode == 46)
        { return true; }
        else if (charCode > 31 && (charCode < 46 || charCode > 57)) {
            return false;
        }
        else if (charCode == 47)
        { return false; }
        else
        { return true; }
    }

    function isNumber(evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode == 8 || charCode == 46)
        { return true; }
        else if ((charCode < 48 || charCode > 57)) {
            return false;
        }
        else { return true; }
    }

    $(document).ready(function () {
        var isCreditAllowedVal = $('#ClientCreditSetting_IsCreditAllowed').val();
        if (isCreditAllowedVal == 'True') {
            $("#ClientCreditSetting_CreditLimit").removeAttr('disabled');
            $("#ClientCreditSetting_PaymentTerms").removeAttr('disabled');
            $("#ClientCreditSetting_OverdueLimit").removeAttr('disabled');
        }
        else if (isCreditAllowedVal == 'False') {
            $("#ClientCreditSetting_CreditLimit").attr('disabled', 'disabled');
            $("#ClientCreditSetting_PaymentTerms").attr('disabled', 'disabled');
            $("#ClientCreditSetting_OverdueLimit").attr('disabled', 'disabled');
            $("#ClientCreditSetting_CreditLimit").val('');
            $("#ClientCreditSetting_PaymentTerms").val('');
            $("#ClientCreditSetting_OverdueLimit").val('');
        }
    });

    $(function () {
        $('#ClientCreditSetting_IsCreditAllowed').change(function () {
            var isCreditAllowedVal = $('#ClientCreditSetting_IsCreditAllowed').val();
            if (isCreditAllowedVal == 'True') {
                $("#ClientCreditSetting_CreditLimit").removeAttr('disabled');
                $("#ClientCreditSetting_PaymentTerms").removeAttr('disabled');
                $("#ClientCreditSetting_OverdueLimit").removeAttr('disabled');
            }
            else if (isCreditAllowedVal == 'False') {
                $("#ClientCreditSetting_CreditLimit").attr('disabled', 'disabled');
                $("#ClientCreditSetting_PaymentTerms").attr('disabled', 'disabled');
                $("#ClientCreditSetting_OverdueLimit").attr('disabled', 'disabled');
                $("#ClientCreditSetting_CreditLimit").val('');
                $("#ClientCreditSetting_PaymentTerms").val('');
                $("#ClientCreditSetting_OverdueLimit").val('');
            }
        });
    });
</script>
<script>
    $(document).ready(function () {
        // App.init();
        TableManageDefault.init();
        // Notification.init();
    });
</script>

<script>
    $(document).ready(function () {
        var no = "@ViewBag.No";
        $("#AttachmenNo").val(no);
        var urls = "/Tutor/UploadAttachment?id=" + no;
        $("#divTutorDetail").load(urls);

        @*$("#SubjectsName").val('@Model.SubjectsName')
        var val = "";
        var name = "";
        $("#CourseSubjects").change(function () {
            var zhi = $("#CourseSubjects").find("option:selected").text();


            if (val == "") {
                val = $("#CourseSubjects").find("option:selected").text();
            }
            else {

                zhi = zhi.replace(name, "");
                val += "," + zhi;
            }
            $("#SubjectsName").val(val);
            name = $("#CourseSubjects").find("option:selected").text();
        })*@
        $(window).on('load', function () {
            $('#CourseSubjects').selectpicker({
                'selectedText': 'cat'
            });
        });
        var str = '@Model.Subjects';
        var arr = str.split(',');
        //$('.CourseSubjects').selectpicker('val', 'Mustard');
        $('select#CourseSubjects').val(arr);//('val', 1);

        //$('.CourseSubjects').selectpicker('val', arr);
        //$('.CourseSubjects').selectpicker('refresh');
        //$("#CourseSubjects").selectpicker('val', arr);

        $('#JoinedDate').datepicker({
            format: 'dd/mm/yyyy',
            setDate: new Date(),
            todayHighlight: true,
            autoclose: true
        });
        //$('#JoinedDate').datepicker('setDate', new Date());

        $('#ResignedDate').datepicker({
            format: 'dd/mm/yyyy',
            setDate: new Date(),
            todayHighlight: true,
            autoclose: true
        });
        //$('#ResignedDate').datepicker('setDate', new Date());

        $('#birthDate').datepicker({
            format: 'dd/mm/yyyy',
            setDate: new Date(),
            todayHighlight: true,
            autoclose: true
        });
        //$('#birthDate').datepicker('setDate', new Date());

    });
</script>


<script type="text/javascript">
    $(document).ready(function () {
        $("select.staffpicker").change(function () {
            var staffid = $(".staffpicker option:selected").val();
            var staffname = $(".staffpicker option:selected").text().trim();

            $('#personID').val(staffid);
            $('#personName').val(staffname);

            //   alert($('#personID').val() + "-" + $('#personName').val());

        });
    });

</script>



