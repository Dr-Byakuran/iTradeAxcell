@model iTrade.Models.Product
@using iTrade.CustomHtmlHelper;
@using iTrade.Models;
@*@model IEnumerable<iTrade.Models.Supplier>*@

@{
    ViewBag.Title = "Manage";
    Layout = "~/Views/Shared/_LayoutMain.cshtml";
}

<!-- ================== BEGIN PAGE LEVEL STYLE ================== -->
<link href="@Url.Content("~/assets/plugins/DataTables/css/data-table.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/gritter/css/jquery.gritter.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/bootstrap-datepicker/css/datepicker.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/bootstrap-combobox/css/bootstrap-combobox.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/bootstrap-select/bootstrap-select.min.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/select2/dist/css/select2.min.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/bootstrap-tagsinput/bootstrap-tagsinput.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/assets/plugins/jquery-tag-it/css/jquery.tagit.css")" rel="stylesheet" type="text/css" />

@Styles.Render("~/bootstrap-fileinput-master/filecss")
<!-- ================== END PAGE LEVEL STYLE ================== -->

@using (Html.BeginForm())
{
<!-- begin page-header -->
<div class="page-header lead">Products / @Model.ProductName &nbsp;&nbsp;&nbsp;&nbsp; <span class="small">   SKU: @Model.SKU </span>
    <span class="email-btn-row pull-right">
        @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })
        <button type="button" id="btnSaveAndAdd" class="btn btn-default">Save & Add Another</button>
        <button type="submit" id="btnSaveChanges" class="btn btn-primary">Save Changes</button>
    </span>
    
</div>
<!-- end page-header --> 

 

            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ProductID)
            @Html.HiddenFor(model => model.SupplierID, new { id = "supplierID"})
            @Html.HiddenFor(model => model.SupplierName, new { id = "supplierName" })
            @Html.HiddenFor(model => model.PartNo)
            @Html.HiddenFor(model => model.ProductCode)
            @Html.HiddenFor(model => model.BaseCurrency)
            @Html.HiddenFor(model => model.ImageUrl)
            @Html.HiddenFor(model => model.ImageUrl2)
            @Html.HiddenFor(model => model.CreatedBy)
            @Html.HiddenFor(model => model.CreatedOn)

 
                    <div class="">
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#default-tab-1" data-toggle="tab">General Info </a></li>
                            <li class=""><a href="#default-tab-2" data-toggle="tab">Stock/Inventory</a></li>
                            <li class=""><a href="#default-tab-3" data-toggle="tab">Prices</a></li>
                            <li class=""><a href="#default-tab-4" data-toggle="tab">Bundle/Package</a></li>
                            <li class=""><a href="#default-tab-5" data-toggle="tab">Stock In/Out Transaction</a></li>
                            <li class=""><a href="#default-tab-6" data-toggle="tab">Sales History</a></li>

                        </ul>

                    </div>

                    <div class="tab-content">

                        <div class="tab-pane fade active in" id="default-tab-1">
                            <div class="form-horizontal">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductType, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.ProductType, new List<SelectListItem> {
                                                                                        new SelectListItem { Value = "PRODUCT", Text = "PRODUCT", Selected = true },
                                                                                        new SelectListItem { Value = "SERVICE", Text = "SERVICE" },
                                                                                        new SelectListItem { Value = "PACKAGE", Text = "PACKAGE" },
                                                                                        new SelectListItem { Value = "OTHER", Text = "OTHER" }

                                                                                      }, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ModelNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ModelNo, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ModelNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.ProductDesc, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ProductDesc, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Dimension, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Dimension, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Dimension, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.Finishes, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Finishes, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Finishes, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Lamp, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Lamp, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Lamp, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.Gear, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Gear, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Gear, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Driver, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Driver, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Driver, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Reference, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductCats, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.ProductCats, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ProductCats, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.CountryCode, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.CountryCode, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CountryCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.SupplierName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-6">
                                        <select class="form-control supplierpicker">
                                            <option value="" selected>Select supplier</option>
                                            @foreach (var item in ViewData["SuppliersAll"] as IEnumerable<iTrade.Models.Supplier>)
                                            {
                                                <option value="@item.SupplierID">@item.SupplierName</option>
                                                //@item.FileName  // instead .FileName use property which u used in ur model class
                                            }
                                        </select>

                                    </div>
                                </div>


                                <hr />

                                <div class="form-group">
                                    @Html.LabelFor(model => model.SKU, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.SKU, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.SKU, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.SKUPurchase, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.SKUPurchase, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.SKUPurchase, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Barcode, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Barcode, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Barcode, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Qty, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-1">
                                        @Html.DropDownListFor(model => model.Unit, new List<SelectListItem> {
                                                                                        new SelectListItem { Value = "PC", Text = "PC", Selected = true },
                                                                                        new SelectListItem { Value = "Set", Text = "Set" },
                                                                                        new SelectListItem { Value = "Pkg", Text = "Pkg" }
                                                                                      }, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })


                                    </div>
                                </div>

                                <hr />
                                <div class="form-group">
                                    <label class="control-label col-md-2">Control Item?</label>
                                    <div class="col-md-2">
                                        <label class="radio-inline">@Html.RadioButtonFor(x => x.IsControlItem, "true") Yes</label>  &nbsp;&nbsp;
                                        <label class="radio-inline">@Html.RadioButtonFor(x => x.IsControlItem, "false") No</label>
                                    </div>
                                    <label class="control-label col-md-2">Featured?</label>
                                    <div class="col-md-2">
                                        <label class="radio-inline">@Html.RadioButtonFor(x => x.IsFeatured, "true") Yes</label> &nbsp;&nbsp;
                                        <label class="radio-inline">@Html.RadioButtonFor(x => x.IsFeatured, "false") No</label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-2">Is Active?</label>
                                    <div class="col-md-2">
                                        <label class="radio-inline">@Html.RadioButtonFor(x => x.IsActive, "true") Yes</label>  &nbsp;&nbsp;
                                        <label class="radio-inline">@Html.RadioButtonFor(x => x.IsActive, "false") No</label>
                                    </div>
                                </div>

                                <hr />


                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                            </div>



                        </div>
                        <div class="tab-pane fade" id="default-tab-2">
                            <div class="form-group">
                                <h4 class="control-label">Manage inventory level for this product?</h4> &nbsp;&nbsp;&nbsp;&nbsp;
                                <label class="radio-inline">@Html.RadioButtonFor(x => x.ManageStock, "true") Yes</label> &nbsp;&nbsp;
                                <label class="radio-inline">@Html.RadioButtonFor(x => x.ManageStock, "false") No</label>

                            </div>
                            <hr />

                            <div class="form-horizontal">

                                <div class="form-group">
                                    @Html.Label("Minimum stock Qty", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.MinStockQty, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MinStockQty, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.Label("Maximumm stock Qty", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.MaxStockQty, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MaxStockQty, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.Label("Reorder Qty", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.ReorderQty, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ReorderQty, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>

                        </div>


                        <div class="tab-pane fade" id="default-tab-3">
                            <div class="form-horizontal hide">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CostPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.CostPrice, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CostPrice, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.RetailPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.RetailPrice, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.RetailPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.WholesalePrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.WholesalePrice, new { htmlAttributes = new { @Value = 0, @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.WholesalePrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DealerPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.DealerPrice, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.DealerPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>


                            <div class="row">
                                <div class="col-md-12">
                                    <div id="divPriceOptions">
                                        <div class="form-horizontal">
                                            @Html.EditorFor(x => x.PriceOptions)

                                        </div>

                                    </div>
                                    <div class="col-md-1">
                                        @Html.AddLink("+ Option (Another unit)", "#divPriceOptions", ".infoPriceOption", "PriceOptions", typeof(iTrade.Models.PriceOption))

                                    </div>
                                </div>
                            </div>
                            <hr /> 




                            <div class="form-group">
                                <h4 class="control-label">Use price break?</h4> &nbsp;&nbsp;&nbsp;&nbsp;
                                <label class="radio-inline">@Html.RadioButtonFor(x => x.UsePricebreak, "true") Yes</label> &nbsp;&nbsp;
                                <label class="radio-inline">@Html.RadioButtonFor(x => x.UsePricebreak, "false") No</label>

                            </div>

                            <div class="row">
                                <div class="col-md-2">
                                    <h5>Break (Qty)</h5>
                                </div>
                                <div class="col-md-2">
                                    <h5>Retail Price</h5>
                                </div>
                                <div class="col-md-2">
                                    <h5>Dealer Price</h5>
                                </div>
                                <div class="col-md-2">
                                    <h5>FOC (Qty)</h5>
                                </div>
                                <div class="col-md-2">

                                </div>
                            </div>


                            <div class="row">
                                <div class="col-md-12">
                                    <div id="divPricebreaks">
                                        @Html.EditorFor(x => x.Pricebreaks)
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">

                                        @Html.AddLink("Add Pricebreak", "#divPricebreaks", ".infoPricebreak", "Pricebreaks", typeof(iTrade.Models.Pricebreak))

                                    </div>
                                </div>
                            </div>

                        </div>



                        <div class="tab-pane fade" id="default-tab-4">

                            <div class="form-group">
                                <h4 class="control-label">This is a Bundle/Package product?</h4> &nbsp;&nbsp;&nbsp;&nbsp;
                                <label class="radio-inline">@Html.RadioButtonFor(x => x.IsBundle, "true") Yes</label> &nbsp;&nbsp;
                                <label class="radio-inline">@Html.RadioButtonFor(x => x.IsBundle, "false") No</label>
                            </div>
                            <hr />
                             
                            <h4>Items list for the package </h4> 

                            <div class="row">
                                <div class="col-md-2">
                                    <h5>SKU</h5>
                                </div>
                                <div class="col-md-4">
                                    <h5>Item Name</h5>
                                </div>
                                <div class="col-md-2">
                                    <h5>Qty</h5>
                                </div>
                                <div class="col-md-1">
                                    <h5>Position</h5>
                                </div>
                                <div class="col-md-2">

                                </div>
                            </div>


                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-horizontal">
                                        <div id="infoBundles">
                                            @Html.EditorFor(x => x.Productbundles)

                                        </div>

                                    </div>

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">

                                    @Html.AddLink("Add another product", "#infoBundles", ".infoBundle", "Productbundles", typeof(iTrade.Models.Productbundle))

                                </div>
                            </div>  

                            <br />
                            <hr />
                            <h4>FOC Items (if applicable) </h4>

                            <div class="row">
                                <div class="col-md-2">
                                    <h5>SKU</h5>
                                </div>
                                <div class="col-md-4">
                                    <h5>Item Name</h5>
                                </div>
                                <div class="col-md-2">
                                    <h5>Qty</h5>
                                </div>
                                <div class="col-md-1">
                                    <h5>Position</h5>
                                </div>
                                <div class="col-md-2">

                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-horizontal">
                                        <div id="focBundles">
                                            @Html.EditorFor(x => x.ProductFOCs)

                                        </div>

                                    </div>

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">

                                    @Html.AddLink("Add another FOC item", "#focBundles", ".focBundle", "ProductFOCs", typeof(iTrade.Models.ProductFOC))

                                </div>
                            </div>     



                        </div>
                        <div class="tab-pane fade" id="default-tab-5">
                            <div class="form-horizontal">
                                <div class="table-responsive">
                                    <table id="data-table2" class="table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th style="vertical-align:top;">
                                                    Location
                                                </th>
                                                <th style="vertical-align:top;">
                                                    Process Type
                                                </th>
                                                <th style="vertical-align:top;">
                                                    Qty
                                                </th>
                                                <th style="vertical-align:top;">
                                                    Transaction Date
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            @{Html.RenderAction("_DisplayStockTransaction", "Products", new { id = Model.ProductID });}

                                        </tbody>
                                    </table>
                                </div>
                                </div>
                            </div>

                        <div class="tab-pane fade" id="default-tab-6">
                            <div class="form-horizontal">
                                <div class="table-responsive">
                                    <table id="data-table1" class="table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th style="vertical-align:top;">
                                                    Invoice#
                                                </th>
                                                <th style="vertical-align:top;">
                                                    Invoice Date
                                                </th>
                                                <th style="vertical-align:top;">
                                                    Customer
                                                </th>
                                                <th style="vertical-align:top;">
                                                    Qty
                                                </th>
                                                <th style="vertical-align:top;">
                                                    Amount
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            @{Html.RenderAction("_DisplaySalesList", "Products", new { id = Model.ProductID });}

                                        </tbody>
                                    </table>
                                    </div>
                                </div>

                            </div>

                    </div>





    <br /> 

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>





}




        @section Scripts{
            <script src="@Url.Content("~/assets/plugins/DataTables/js/jquery.dataTables.js")"></script>
            <script src="@Url.Content("~/assets/js/table-manage-default.demo.min.js")"></script>
            <script src="@Url.Content("~/assets/plugins/gritter/js/jquery.gritter.js")"></script>
            <script src="@Url.Content("~/assets/js/ui-modal-notification.demo.min.js")"></script>

            <script src="@Url.Content("~/assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.js")"></script>
            <script src="@Url.Content("~/assets/plugins/bootstrap-combobox/js/bootstrap-combobox.js")"></script>
            <script src="@Url.Content("~/assets/plugins/bootstrap-select/bootstrap-select.min.js")"></script>
            <script src="@Url.Content("~/assets/plugins/select2/dist/js/select2.min.js")"></script>
            <script src="@Url.Content("~/assets/plugins/bootstrap-tagsinput/bootstrap-tagsinput.min.js")"></script>
            <script src="@Url.Content("~/assets/plugins/bootstrap-tagsinput/bootstrap-tagsinput-typeahead.js")"></script>
            <script src="@Url.Content("~/assets/plugins/jquery-tag-it/js/tag-it.min.js")"></script>


            <script src="@Url.Content("~/assets/js/form-plugins.star.js")"></script>

            <script src="@Url.Content("~/assets/js/apps.min.js")"></script>

            <script src="@Url.Content("~/Scripts/modal-open.js")"></script>
            @Scripts.Render("~/bundles/filejs")
 

        }


        <script>
            $(document).ready(function () {
                // App.init();
                TableManageDefault.init();
                // Notification.init();
                FormPlugins.init();

            });
        </script>

<script type="text/javascript">
    $(document).ready(function () {
        $("select.supplierpicker").change(function () {
            var itemid = $(".supplierpicker option:selected").val();
            var itemname = $(".supplierpicker option:selected").text();

            $('#supplierID').val(itemid);
            $('#supplierName').val(itemname);

        });
        $('#data-table1').DataTable({
            "dom": '<"pull-left"f><"pull-right"l>tip'
        });
        $('#data-table2').DataTable({
            "dom": '<"pull-left"f><"pull-right"l>tip'
        });
    });
</script>



<script>
    $(document).ready(function () {
        $('#infoBundles input[id*=txtSearch]').focus().autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("AutoComplete_Product")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        search: $('#infoBundles input[id*=txtSearch]').focus().val()
                    },
                    success: function (data) {

                        response($.map(data, function (item) {
                            return {
                                label: item.ProductID + " | " + item.SKU + " | " + item.ProductName + " | $ " + item.SellPrice + " | " + item.CostCode,

                            };
                        }));

                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }

                });
            },
            selectFirst: true,
            delay: 0,
            autoFocus: true,
            minLength: 1


        });

        $('#infoBundles input[id*=txtSearch]').on("autocompleteselect", function (event, ui) {
            var str1 = ui.item.value;
            var str2 = str1.split("|");
            var val = str2[0].trim();

            $.ajax({
                type: 'GET',
                url: '@Url.Action("AutoCompleteSelected_Product")',
                dataType: "json",
                contentType: 'application/json, charset=utf-8',
                data: {
                    search: val
                },
                success: function (data) {
                    $('#txtProductID').val(data.result.ProductID);
                    $('#txtSKU').val(data.result.SKU);
                    $('#txtProductType').val(data.result.ProductType);
                    $('#txtProductName').val(data.result.ProductName);
                    $('#txtModelNo').val(data.result.ModelNo);
                    $('#txtIsBundle').val(data.result.IsBundle);
                    $('#txtIsControlItem').val(data.result.IsControlItem);
                    $('#txtRemark').val("Package Item");

                    $('#itemUnit').val(data.result.Unit);
                    var unitprice = data.result.SellPrice.toFixed(2);
                    $('#itemUnitPrice').val(unitprice);
                    $('#itemStockQty').val(0);

                    $('#itemCostPrice').val(data.result.CostPrice);
                    var disc = (0.00).toFixed(2);
                    $('#itemDiscount').val(disc);
                    $('#itemDiscountedPrice').val(unitprice);

                    var qty = $('#txtQty').val();

                    var amount = Math.round(qty * unitprice * 100) / 100;
                    amount = amount.toFixed(2);

                    $('#itemAmount').val(amount);

                    $('#txtQty').focus();
                    $('#txtQty').select();
                    $('.infoBundle input.txtKey').val("");
                    $('#searchbox').hide();

                },
                error: function (xhr, status, error) {
                    alert(error);
                }

            });

        });



    });

</script>


<script type="text/javascript">
    function removeNestedForm(element, container, deleteElement) {
        $container = $(element).parents(container);
        $container.find(deleteElement).val('True');
        $container.hide();
    }

    function addNestedForm(container, counter, ticks, content) {
        var nextIndex = $(counter).length;
        var pattern = new RegExp(ticks, "gi");
        content = content.replace(pattern, nextIndex);
        $(container).append(content);

        var textbox1 = document.getElementsByName($(content).find('.searchInput').attr('name'));

        $(textbox1).focus().autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("AutoComplete_Product")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        search: $(textbox1).val()
                    },
                    success: function (data) {

                        response($.map(data, function (item) {
                            return {
                                label: item.ProductID + " | " + item.SKU + " | " + item.ProductName + " | $ " + item.SellPrice + " | " + item.CostCode,

                            };
                        }));

                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }

                });
            },
            selectFirst: true,
            delay: 0,
            autoFocus: true,
            minLength: 1


        });

        $('#infoBundles input[id*=txtSearch]').focus().on("autocompleteselect", function (event, ui) {
            var str1 = ui.item.value;
            var str2 = str1.split("|");
            var val = str2[0].trim();

            $container = $(this).parents('div.infoBundle');

            //  alert(val);

            $.ajax({
                type: 'GET',
                url: '@Url.Action("AutoCompleteSelected_Product")',
                dataType: "json",
                contentType: 'application/json, charset=utf-8',
                data: {
                    search: val
                },
                success: function (data) {
                    $container.find('#txtProductID').val(data.result.ProductID);
                    $container.find('#txtSKU').val(data.result.SKU);
                    $container.find('#txtProductType').val(data.result.ProductType);
                    $container.find('#txtProductName').val(data.result.ProductName);
                    $container.find('#txtModelNo').val(data.result.ModelNo);
                    $container.find('#txtIsBundle').val(data.result.IsBundle);
                    $container.find('#txtIsControlItem').val(data.result.IsControlItem);
                    $container.find('#txtRemark').val("Package Item");

                    $container.find('#txtQty').focus();
                    $container.find('#txtQty').select();
                    $container.find('#txtSearch').val("");
                    $container.find('#searchbox').hide();

                },
                error: function (xhr, status, error) {
                    alert(error);
                }

            });

        });


        $('#focBundles input[id*=focSearch]').focus().on("autocompleteselect", function (event, ui) {
            var str1 = ui.item.value;
            var str2 = str1.split("|");
            var val = str2[0].trim();

            $container = $(this).parents('div.focBundle');

            //  alert(val);

            $.ajax({
                type: 'GET',
                url: '@Url.Action("AutoCompleteSelected_Product")',
                dataType: "json",
                contentType: 'application/json, charset=utf-8',
                data: {
                    search: val
                },
                success: function (data) {
                    $container.find('#focProductID').val(data.result.ProductID);
                    $container.find('#focSKU').val(data.result.SKU);
                    $container.find('#focProductType').val(data.result.ProductType);
                    $container.find('#focProductName').val(data.result.ProductName);
                    $container.find('#focModelNo').val(data.result.ModelNo);
                    $container.find('#focIsBundle').val(data.result.IsBundle);
                    $container.find('#focIsControlItem').val(data.result.IsControlItem);
                    $container.find('#focRemark').val("Package Item");

                    $container.find('#focQty').focus();
                    $container.find('#focQty').select();
                    $container.find('#focSearch').val("");
                    $container.find('#focsearchbox').hide();

                },
                error: function (xhr, status, error) {
                    alert(error);
                }

            });

        });



    }


</script>



<script>
    $(document).ready(function () {
        $('#focBundles input[id*=focSearch]').focus().autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("AutoComplete_Product")',
                    dataType: "json",
                    contentType: 'application/json, charset=utf-8',
                    data: {
                        search: $('#focBundles input[id*=focSearch]').focus().val()
                    },
                    success: function (data) {

                        response($.map(data, function (item) {
                            return {
                                label: item.ProductID + " | " + item.SKU + " | " + item.ProductName + " | $ " + item.SellPrice + " | " + item.CostCode,

                            };
                        }));

                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }

                });
            },
            selectFirst: true,
            delay: 0,
            autoFocus: true,
            minLength: 1


        });

        $('#focBundles input[id*=focSearch]').on("autocompleteselect", function (event, ui) {
            var str1 = ui.item.value;
            var str2 = str1.split("|");
            var val = str2[0].trim();

            $.ajax({
                type: 'GET',
                url: '@Url.Action("AutoCompleteSelected_Product")',
                dataType: "json",
                contentType: 'application/json, charset=utf-8',
                data: {
                    search: val
                },
                success: function (data) {
                    $('#focProductID').val(data.result.ProductID);
                    $('#focSKU').val(data.result.SKU);
                    $('#focProductType').val(data.result.ProductType);
                    $('#focProductName').val(data.result.ProductName);
                    $('#focModelNo').val(data.result.ModelNo);
                    $('#focIsBundle').val(data.result.IsBundle);
                    $('#focIsControlItem').val(data.result.IsControlItem);
                    $('#focRemark').val("Package Item");

                    $('#itemUnit').val(data.result.Unit);
                    var unitprice = data.result.SellPrice.toFixed(2);
                    $('#itemUnitPrice').val(unitprice);
                    $('#itemStockQty').val(0);

                    $('#itemCostPrice').val(data.result.CostPrice);
                    var disc = (0.00).toFixed(2);
                    $('#itemDiscount').val(disc);
                    $('#itemDiscountedPrice').val(unitprice);

                    var qty = $('#focQty').val();

                    var amount = Math.round(qty * unitprice * 100) / 100;
                    amount = amount.toFixed(2);

                    $('#itemAmount').val(amount);

                    $('#focQty').focus();
                    $('#focQty').select();
                    $('.focBundle input.focKey').val("");
                    $('#focsearchbox').hide();

                },
                error: function (xhr, status, error) {
                    alert(error);
                }

            });

        });



    });

</script>
